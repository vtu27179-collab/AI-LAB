from itertools import permutations  # only standard library

V = 4  # number of vertices

def travellingSalesmanProblem(graph, s):
    vertex = [i for i in range(V) if i != s]
    min_path = float('inf')  # replaces sys.maxsize

    # Generate all possible paths
    for perm in permutations(vertex):
        current_pathweight = 0
        k = s
        for j in perm:
            current_pathweight += graph[k][j]
            k = j
        current_pathweight += graph[k][s]  # return to start

        min_path = min(min_path, current_pathweight)

    return min_path


if __name__ == "__main__":
    graph = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]
    s = 0
    print("Minimum cost of Travelling Salesman tour is:", travellingSalesmanProblem(graph, s))
