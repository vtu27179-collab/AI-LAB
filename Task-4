# Minimax with Alpha-Beta Pruning (corrected)

# Initial values for alpha and beta
MIN = -1000
MAX = 1000

def minimax(depth, nodeIndex, maximizingPlayer, values, alpha, beta):
    """
    depth: current depth in game tree
    nodeIndex: index of current node in `values` when a leaf is reached
    maximizingPlayer: True if current level is maximizer
    values: list of leaf node values (assumes perfect binary tree)
    alpha, beta: current alpha and beta values
    """
    # Terminating condition: leaf node reached
    if depth == 3:
        return values[nodeIndex]

    if maximizingPlayer:
        best = MIN
        # Recur for left and right children
        for i in range(2):
            val = minimax(depth + 1, nodeIndex * 2 + i, False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)

            # Alpha Beta Pruning
            if beta <= alpha:
                break

        return best
    else:
        best = MAX
        # Recur for left and right children
        for i in range(2):
            val = minimax(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)

            # Alpha Beta Pruning
            if beta <= alpha:
                break

        return best


# Driver Code
if __name__ == "__main__":
    values = [3, 5, 6, 9, 1, 2, 0, -1]
    print("The optimal value is:", minimax(0, 0, True, values, MIN, MAX))
